/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fory.jprogressbar;

import com.Confidence.Formularios.frm_AgregarAdherente;
import com.Confidence.Formularios.frm_EliminarAdherente;
import com.Confidence.Formularios.frm_editarDatosAdherente;
import com.Confidence.Formularios.frm_listadoAdherentes;
import com.mysql.jdbc.CallableStatement;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Martin Tomas F
 */
public class barraProgreso extends javax.swing.JFrame {

    private String user = "confidenceuser", password = "podersasrl";
    private int contador = 0;

    public barraProgreso() {
        initComponents();
        darLimiteBarraProgreso();
        setLocationRelativeTo(null);
        jProgressBar1.setMaximum(contador);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jlb_porcentaje = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Confidence - Actualizacion de base de datos");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Actualizando base de datos");

        jProgressBar1.setBackground(new java.awt.Color(255, 255, 255));
        jProgressBar1.setMaximum(10);

        jlb_porcentaje.setFont(new java.awt.Font("Segoe UI", 0, 25)); // NOI18N
        jlb_porcentaje.setText("0%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jlb_porcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlb_porcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(barraProgreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(barraProgreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(barraProgreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(barraProgreso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new barraProgreso().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jlb_porcentaje;
    // End of variables declaration//GEN-END:variables

    public void BajaAdherentesParaCobro() {
        Connection con = null;
        Statement st = null;
        Integer dni = 0;
        Date fechaProbCobro;
        try {
            int x = 0;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select dni, fecha_prob_cobro from adheridos");
            while (rs.next()) {
                esperar(500);
                dni = rs.getInt(1);
                fechaProbCobro = rs.getDate(2);
                Date fechaHoy = Date.valueOf(LocalDate.now());
                if ((fechaProbCobro.compareTo(fechaHoy) == 0 || fechaProbCobro.compareTo(fechaHoy) < 0) && verificarEstado(dni)) {
                    darDeBajaAdherente(dni);
                    crearCobro(dni);
                    x++;
                    jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                    this.update(this.getGraphics());
                    jProgressBar1.update(jProgressBar1.getGraphics());
                    jlb_porcentaje.update(jlb_porcentaje.getGraphics());
                    configurarPorcentaje(jProgressBar1.getValue(), contador);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void darDeBajaAdherente(int dni) {
        Connection con = null;
        PreparedStatement st = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.prepareStatement("update adheridos set estado = ?, dniPadre = ?, cantHijos = ? where dni = ?");
            st.setBoolean(1, false);
            restarCantHijos(dni);
            st.setInt(2, 0);
            st.setInt(3, 0);
            st.setInt(4, dni);
            st.executeUpdate();
            EliminarVinculoHijos(dni);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void EliminarVinculoHijos(int dni) {
        Connection con = null;
        CallableStatement cs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            cs = (CallableStatement) con.prepareCall("CALL eliminarPadreDeHijos(?)");
            cs.setInt(1, dni);
            cs.execute();
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_EliminarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_EliminarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }

    public boolean verificarEstado(int dni) {
        boolean verif = false;
        Connection con = null;
        CallableStatement cs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            cs = (CallableStatement) con.prepareCall("CALL verificarEstado(?,?)");
            cs.setInt(1, dni);
            cs.registerOutParameter(2, java.sql.Types.BOOLEAN);
            cs.execute();
            verif = cs.getBoolean(2);
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return verif;
    }

    public void crearCobro(Integer dni) {
        int cantidadHijosN5 = obtenerCantidadHijosN5(dni);
        cargarCobro(dni, cantidadHijosN5);
    }

    public int obtenerCantidadHijosN5(int dni) {
        int cantHijos = 0;
        Connection con = null;
        CallableStatement cs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            cs = (CallableStatement) con.prepareCall("CALL nivelcinco(?,?)");
            cs.setInt(1, dni);
            cs.registerOutParameter(2, java.sql.Types.INTEGER);
            cs.execute();
            cantHijos = cs.getInt(2);
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_listadoAdherentes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_listadoAdherentes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return cantHijos;
    }

    public void cargarCobro(Integer dni, int cantHijosN5) {
        Connection con = null;
        PreparedStatement pst = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            pst = con.prepareStatement("insert into cobros(dni, cant_personas) values (?,?)");
            pst.setInt(1, dni);
            pst.setInt(2, cantHijosN5);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void darLimiteBarraProgreso() {
        Connection con = null;
        Statement st = null;
        Integer dni = 0;
        Date fechaProbCobro;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select dni, fecha_prob_cobro from adheridos");
            while (rs.next()) {
                dni = rs.getInt(1);
                fechaProbCobro = rs.getDate(2);
                Date fechaHoy = Date.valueOf(LocalDate.now());
                if ((fechaProbCobro.compareTo(fechaHoy) == 0 || fechaProbCobro.compareTo(fechaHoy) < 0) && verificarEstado(dni)) {
                    contador++;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void configurarPorcentaje(int x, int contador) {
        int valor = (int) (100 * x) / contador;
//        this.update(this.getGraphics());
//        jlb_porcentaje.update(jlb_porcentaje.getGraphics());
        jlb_porcentaje.setText(valor + "%");
    }

    private void esperar(int miliSegundos) {
        try {
            Thread.sleep(miliSegundos);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void restarCantHijos(int dni) {
        int dniPadre = obtenerDniPadre(dni);
        Connection con = null;
        PreparedStatement st = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.prepareStatement("update adheridos set cantHijos = cantHijos -1 where dni = ?");
            st.setInt(1, dniPadre);
            st.executeUpdate();
            EliminarVinculoHijos(dni);
            JOptionPane.showMessageDialog(null, "El adherente ha sido dado de baja con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private int obtenerDniPadre(int dni) {
        Connection con = null;
        Statement st = null;
        int retorno = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select dniPadre from adheridos where dni = " + dni);
            while (rs.next()) {
                retorno = rs.getInt(1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_EliminarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_EliminarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return retorno;
    }
}
