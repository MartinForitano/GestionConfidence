/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.Confidence.Formularios;

import com.mysql.jdbc.CallableStatement;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import static javax.swing.SwingUtilities.updateComponentTreeUI;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Martin Tomas F
 */
public class frm_AgregarAdherente extends javax.swing.JFrame {

    private String user = "confidenceuser", password = "podersasrl";
    DefaultTableModel Modelo;

    public frm_AgregarAdherente() {
        initComponents();
        WindowsLockFeel();
        setLocationRelativeTo(null);
        CargarInterfaz();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jtf_Ciudad = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jtf_Provincia = new javax.swing.JTextField();
        jtf_Profesion = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jtf_Apellido = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jtf_DNI = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jtf_Domicilio = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jtf_Nombre = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jtf_Categoria = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        jtf_Telefono = new javax.swing.JTextField();
        jButton17 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jtf_DniReferente = new javax.swing.JTextField();
        jtf_DniReferido = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        jButton14 = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        jtf_edicionVinculoNombreReferente = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel44 = new javax.swing.JLabel();
        jtf_edicionVinculoNombreReferido = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel40 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel41 = new javax.swing.JLabel();
        jtf_dniComodin = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nuevo adherente");
        setAlwaysOnTop(true);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane4.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTabbedPane4.setOpaque(true);
        jTabbedPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane4MouseClicked(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jtf_Ciudad.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Ciudad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_CiudadKeyTyped(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel29.setText("Categoria");

        jtf_Provincia.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Provincia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_ProvinciaKeyTyped(evt);
            }
        });

        jtf_Profesion.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Profesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_ProfesionActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel30.setText("Nombre");

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel31.setText("Apellido");

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel33.setText("D.N.I");

        jtf_Apellido.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Apellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_ApellidoKeyTyped(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel34.setText("Domicilio");

        jtf_DNI.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_DNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_DNIKeyTyped(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel35.setText("Ciudad");

        jtf_Domicilio.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Domicilio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_DomicilioKeyTyped(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel36.setText("Provincia");

        jtf_Nombre.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_NombreActionPerformed(evt);
            }
        });
        jtf_Nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_NombreKeyTyped(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel37.setText("Profesion");

        jtf_Categoria.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Categoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_CategoriaKeyTyped(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton7.setText("Vaciar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton8.setText("Agregar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Nuevo Adherente");

        jButton13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton13.setText("Cerrar");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel42.setText("Telefono");

        jtf_Telefono.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_Telefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_TelefonoKeyTyped(evt);
            }
        });

        jButton17.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton17.setText("Buscar");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 402, Short.MAX_VALUE)
                        .addComponent(jtf_Categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtf_Profesion, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtf_Provincia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtf_Ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel42)
                            .addComponent(jLabel30)
                            .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jtf_Apellido, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jtf_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jtf_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jtf_DNI, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtf_Domicilio, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(132, 132, 132))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(351, 351, 351)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_DNI, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Apellido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Domicilio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Provincia, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Profesion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_Categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addGap(22, 22, 22)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane4.addTab("Agregar nuevo adherente", jPanel4);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel32.setText("D.N.I referente");

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel38.setText("D.N.I referido");
        jLabel38.setPreferredSize(new java.awt.Dimension(88, 32));

        jtf_DniReferente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_DniReferente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_DniReferenteKeyTyped(evt);
            }
        });

        jtf_DniReferido.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_DniReferido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_DniReferidoKeyTyped(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel39.setText("Crear vinculos");

        jButton10.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton10.setText("Buscar");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton11.setText("Buscar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton12.setText("Crear vinculo");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton14.setText("Cerrar");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel43.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel43.setText("Nombre");

        jtf_edicionVinculoNombreReferente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_edicionVinculoNombreReferente.setEnabled(false);
        jtf_edicionVinculoNombreReferente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_edicionVinculoNombreReferenteActionPerformed(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel44.setText("Nombre");

        jtf_edicionVinculoNombreReferido.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_edicionVinculoNombreReferido.setEnabled(false);
        jtf_edicionVinculoNombreReferido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_edicionVinculoNombreReferidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator6)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 165, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel43)
                                .addGap(191, 191, 191)
                                .addComponent(jtf_edicionVinculoNombreReferente, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(84, 84, 84)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jtf_DniReferido, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jtf_DniReferente, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel44)
                                .addGap(191, 191, 191)
                                .addComponent(jtf_edicionVinculoNombreReferido, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(183, 183, 183))))
            .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(389, 389, 389)
                .addComponent(jLabel39)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_DniReferente, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel43))
                    .addComponent(jtf_edicionVinculoNombreReferente, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_DniReferido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel44))
                    .addComponent(jtf_edicionVinculoNombreReferido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane4.addTab("Vinculos", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jButton9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton9.setText("Ubicar comodin");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "D.N.I", "Nombre y apellido", "Cantidad de referidos"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton15.setText("Cerrar");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel40.setText("Ubicar comodines");

        jLabel41.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel41.setText("D.N.I. referido");

        jtf_dniComodin.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jtf_dniComodin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_dniComodinKeyTyped(evt);
            }
        });

        jButton16.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton16.setText("Buscar");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("Actualizar tabla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(jLabel41)
                .addGap(94, 94, 94)
                .addComponent(jtf_dniComodin, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(730, 730, 730)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel40)
                .addGap(341, 341, 341))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_dniComodin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane4.addTab("Comodines", jPanel3);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtf_NombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_NombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_NombreActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (!(jtf_Ciudad.getText().trim().equals("") || jtf_Provincia.getText().trim().equals("") || jtf_Profesion.getText().trim().equals("") || jtf_Apellido.getText().trim().equals("") || jtf_DNI.getText().trim().equals("") || jtf_Domicilio.getText().trim().equals("") || jtf_Nombre.getText().trim().equals("") || jtf_Telefono.getText().trim().equals(""))) {
            if (buscarDNI(Integer.parseInt(jtf_DNI.getText().trim())) != -1) {
                if (!verificarEstado(Integer.parseInt(jtf_DNI.getText().trim()))) {
                    if (JOptionPane.showConfirmDialog(this, "El usuario existe, ¿Desea dar de alta?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE) == 0) {
                        darDeAltaAdherido(Integer.parseInt(jtf_DNI.getText().trim()));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "El adherido ya existe y esta dado de alta", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                agregarAdherente();
                limpiarAgregado(1);
            }
        } else {
            if (!jtf_DNI.getText().trim().equals("")) {
                if (buscarDNI(Integer.parseInt(jtf_DNI.getText().trim())) != -1) {
                    if (!verificarEstado(Integer.parseInt(jtf_DNI.getText().trim()))) {
                        if (JOptionPane.showConfirmDialog(this, "El usuario existe, ¿Desea dar de alta?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE) == 0) {
                            darDeAltaAdherido(Integer.parseInt(jtf_DNI.getText().trim()));
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "El adherido ya existe y esta dado de alta", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Falta completar campos", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Falta completar campos", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        limpiarAgregado(1);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jtf_DNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_DNIKeyTyped
        Character tecla = evt.getKeyChar();
        if (!(Character.isDigit(tecla) && (jtf_DNI.getText().length() <= 9))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_DNIKeyTyped

    private void jtf_TelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_TelefonoKeyTyped
        Character tecla = evt.getKeyChar();
        if (!(Character.isDigit(tecla) && (jtf_Telefono.getText().length() < 11))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_TelefonoKeyTyped

    private void jtf_NombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_NombreKeyTyped
        Character tecla = evt.getKeyChar();
        if ((tecla < 'a' || tecla > 'z') && (tecla < 'A' || tecla > 'Z') && !Character.isWhitespace(tecla)) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_NombreKeyTyped

    private void jtf_ApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_ApellidoKeyTyped
        Character tecla = evt.getKeyChar();
        if ((tecla < 'a' || tecla > 'z') && (tecla < 'A' || tecla > 'Z') && !Character.isWhitespace(tecla)) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_ApellidoKeyTyped

    private void jtf_CiudadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_CiudadKeyTyped
        Character tecla = evt.getKeyChar();
        if ((tecla < 'a' || tecla > 'z') && (tecla < 'A' || tecla > 'Z') && !Character.isWhitespace(tecla) && !Character.isWhitespace(tecla) && !(tecla.equals('.') || tecla.equals(','))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_CiudadKeyTyped

    private void jtf_ProvinciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_ProvinciaKeyTyped
        Character tecla = evt.getKeyChar();
        if ((tecla < 'a' || tecla > 'z') && (tecla < 'A' || tecla > 'Z') && !Character.isWhitespace(tecla) && !(tecla.equals('.') || tecla.equals(','))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_ProvinciaKeyTyped

    private void jtf_CategoriaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_CategoriaKeyTyped
        char tecla = evt.getKeyChar();
        if ((tecla < 'a' || tecla > 'z') && (tecla < 'A' || tecla > 'Z') || !(jtf_Categoria.getText().length() < 1)) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_CategoriaKeyTyped

    private void jtf_ProfesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_ProfesionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_ProfesionActionPerformed

    private void jtf_DniReferenteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_DniReferenteKeyTyped
        Character tecla = evt.getKeyChar();
        if (!(Character.isDigit(tecla) && (jtf_DniReferente.getText().length() <= 9))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_DniReferenteKeyTyped

    private void jtf_DniReferidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_DniReferidoKeyTyped
        Character tecla = evt.getKeyChar();
        if (!(Character.isDigit(tecla) && (jtf_DniReferido.getText().length() <= 9))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_DniReferidoKeyTyped

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (!jtf_DniReferente.getText().trim().equals("")) {
            if (buscarDNI(Integer.parseInt(jtf_DniReferente.getText())) == -1 || !verificarEstado(Integer.parseInt(jtf_DniReferente.getText()))) {
                JOptionPane.showMessageDialog(this, "No existe el DNI ingresado", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
            RellenarNombreVinculos(Integer.parseInt(jtf_DniReferente.getText()), 2);
        } else {
            JOptionPane.showMessageDialog(this, "Rellene el campo de DNI para continuar", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if (!jtf_DniReferido.getText().trim().equals("")) {
            if (buscarDNI(Integer.parseInt(jtf_DniReferido.getText())) == -1 || !verificarEstado(Integer.parseInt(jtf_DniReferido.getText()))) {
                JOptionPane.showMessageDialog(this, "No existe el DNI ingresado", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
            RellenarNombreVinculos(Integer.parseInt(jtf_DniReferido.getText()), 1);
        } else {
            JOptionPane.showMessageDialog(this, "Rellene el campo de DNI para continuar", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton11ActionPerformed
//Un hijo no puede ser hijo de si mismo --listo
//Verificar si el vinculo ya se hizo --listo
//Un hijo no puede ser padre de un padre --listo
//Armar tabla de correlacion --nah
//verificar estado del padre/hijo --listo
//vinculos infinitos!! --listo
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        if (!jtf_DniReferente.getText().trim().equals("") && !jtf_DniReferido.getText().trim().equals("")) {
            if (buscarDNI(Integer.parseInt(jtf_DniReferente.getText())) == -1 && Integer.parseInt(jtf_DniReferido.getText()) == -1) {
                JOptionPane.showMessageDialog(this, "No existe el DNI ingresado", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    int dniReferente = buscarDNI(Integer.parseInt(jtf_DniReferente.getText()));
                    int dniReferido = buscarDNI(Integer.parseInt(jtf_DniReferido.getText()));
                    VincularAdherentes(dniReferente, dniReferido);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Debe completar todos los campos");
                }
            }
        }
    }//GEN-LAST:event_jButton12ActionPerformed
//continuar desde aca!
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if (!jtf_dniComodin.getText().trim().equals("")) {
            if (buscarDNI(Integer.parseInt(jtf_dniComodin.getText())) == -1 || !verificarEstado(Integer.parseInt(jtf_dniComodin.getText()))) {
                JOptionPane.showMessageDialog(this, "No existe el DNI ingresado o no esta dado de alta", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Rellene el campo de DNI para continuar", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpiarTabla();
        mostrarDatos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane4MouseClicked
        if (jTabbedPane4.getSelectedIndex() == 2) {
            limpiarTabla();
            mostrarDatos();
        }
    }//GEN-LAST:event_jTabbedPane4MouseClicked

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (!jtf_dniComodin.getText().trim().equals("")) {
            if (buscarDNI(Integer.parseInt(jtf_dniComodin.getText())) == -1 && !verificarEstado(Integer.parseInt(jtf_dniComodin.getText()))) {
                JOptionPane.showMessageDialog(this, "No existe el DNI ingresado o no esta dado de alta", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    int pos = jTable1.getSelectedRow(); //empieza en 0
                    if (pos != -1) {
                        int dniPadre = Integer.parseInt(jTable1.getValueAt(pos, 0).toString());
                        int opc = JOptionPane.showConfirmDialog(this, "¿Posicionar comodín?", "Confirmar", JOptionPane.YES_NO_OPTION);    //0- si 1- no 2- cancelar
                        switch (opc) {
                            case 0:
                                VincularAdherentes(dniPadre, Integer.parseInt(jtf_dniComodin.getText()));
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No se selecciono un elemento", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Debe completar todos los campos", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jtf_dniComodinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_dniComodinKeyTyped
        Character tecla = evt.getKeyChar();
        if (!(Character.isDigit(tecla) && (jtf_dniComodin.getText().length() <= 9))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_dniComodinKeyTyped

    private void jtf_DomicilioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_DomicilioKeyTyped
        Character tecla = evt.getKeyChar();
        if ((tecla < 'a' || tecla > 'z') && (tecla < 'A' || tecla > 'Z') && !Character.isWhitespace(tecla) && !Character.isDigit(tecla) && !Character.isWhitespace(tecla) && !(tecla.equals('.') || tecla.equals(','))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_jtf_DomicilioKeyTyped

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        if (!jtf_DNI.getText().trim().equals("")) {
            if (buscarDNI(Integer.parseInt(jtf_DNI.getText())) == -1) {
                activarJTFs(true);
                limpiarAgregado(2);
            } else if (!verificarEstado(Integer.parseInt(jtf_DNI.getText()))) {
                limpiarAgregado(0);
                rellenarDatosParaModificacion(Integer.parseInt(jtf_DNI.getText()));
                activarJTFs(false);
            } else {
                JOptionPane.showMessageDialog(this, "El adherente existe y esta dado de alta", "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Rellene el campo de DNI para continuar", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jtf_edicionVinculoNombreReferenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_edicionVinculoNombreReferenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_edicionVinculoNombreReferenteActionPerformed

    private void jtf_edicionVinculoNombreReferidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_edicionVinculoNombreReferidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_edicionVinculoNombreReferidoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_AgregarAdherente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_AgregarAdherente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_AgregarAdherente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_AgregarAdherente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_AgregarAdherente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jtf_Apellido;
    private javax.swing.JTextField jtf_Categoria;
    private javax.swing.JTextField jtf_Ciudad;
    private javax.swing.JTextField jtf_DNI;
    private javax.swing.JTextField jtf_DniReferente;
    private javax.swing.JTextField jtf_DniReferido;
    private javax.swing.JTextField jtf_Domicilio;
    private javax.swing.JTextField jtf_Nombre;
    private javax.swing.JTextField jtf_Profesion;
    private javax.swing.JTextField jtf_Provincia;
    private javax.swing.JTextField jtf_Telefono;
    private javax.swing.JTextField jtf_dniComodin;
    private javax.swing.JTextField jtf_edicionVinculoNombreReferente;
    private javax.swing.JTextField jtf_edicionVinculoNombreReferido;
    // End of variables declaration//GEN-END:variables

    private void WindowsLockFeel() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.updateComponentTreeUI(this);
        updateComponentTreeUI(this);
    }

    private void agregarAdherente() {
        Connection con = null;
        PreparedStatement pst = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            pst = con.prepareStatement("insert into adheridos(nombre, apellido, dni, telefono, domicilio, ciudad, provincia, profesion, categoria, fecha_ing, fecha_prob_cobro) values (?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(1, jtf_Nombre.getText());
            pst.setString(2, jtf_Apellido.getText());
            pst.setInt(3, Integer.parseInt(jtf_DNI.getText().trim()));
            pst.setString(4, jtf_Telefono.getText());
            pst.setString(5, jtf_Domicilio.getText());
            pst.setString(6, jtf_Ciudad.getText());
            pst.setString(7, jtf_Provincia.getText());
            pst.setString(8, jtf_Profesion.getText());
            if (jtf_Categoria.getText().trim().equals("")) {
                pst.setString(9, "");
            } else {
                pst.setString(9, jtf_Categoria.getText());
            }
            Date sqldate = Date.valueOf(LocalDate.now());
            pst.setDate(10, sqldate);
            sqldate = sqldate.valueOf(LocalDate.now().plusWeeks(5).plusDays(1));
            pst.setDate(11, sqldate);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Añadido exitosamente");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void limpiarAgregado(int opc) {
        if (opc == 1) {
            jtf_DNI.setText("");
        }
        jtf_Ciudad.setText("");
        jtf_Provincia.setText("");
        jtf_Profesion.setText("");
        jtf_Apellido.setText("");
        jtf_Domicilio.setText("");
        jtf_Nombre.setText("");
        jtf_Categoria.setText("");
        jtf_Telefono.setText("");
    }

    public int buscarDNI(int dni) {
        int verif = 0;
        Connection con = null;
        CallableStatement cs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            cs = (CallableStatement) con.prepareCall("CALL existeDNI(?,?)");
            cs.setInt(1, dni);
            cs.registerOutParameter(2, java.sql.Types.INTEGER);
            cs.execute();
            verif = cs.getInt(2);
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return verif;
    }

    private void darDeAltaAdherido(int dni) {
        Connection con = null;
        PreparedStatement st = null;
        try {
            int reingresante = 0;
            if (JOptionPane.showConfirmDialog(this, "¿Anotar reingreso?", "Confirmacion", JOptionPane.YES_NO_OPTION) == 0) {
                reingresante = 1;
            }
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.prepareStatement("update adheridos set estado = ?, canthijos = ?, dnipadre = ?, reingresante = ?, fecha_ing = ?, fecha_prob_cobro = ? where DNI = ?");
            st.setInt(1, 1);
            st.setInt(2, 0);
            st.setInt(3, 0);
            st.setInt(4, reingresante);
            Date sqldate = Date.valueOf(LocalDate.now());
            st.setDate(5, sqldate);
            sqldate = sqldate.valueOf(LocalDate.now().plusWeeks(5).plusDays(2));
            st.setDate(6, sqldate);
            st.setInt(7, dni);
            st.executeUpdate();
            JOptionPane.showMessageDialog(this, "El adherido ha sido dado de alta nuevamente", "Exito", JOptionPane.INFORMATION_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private boolean puedeAgregarHijos(int dni) {
        Boolean verif = true;
        Connection con = null;
        CallableStatement cs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            cs = (CallableStatement) con.prepareCall("CALL traerCantHijos(?,?)");
            cs.setInt(1, dni);
            cs.registerOutParameter(2, java.sql.Types.INTEGER);
            cs.execute();
            if (cs.getInt(2) >= 4) {
                verif = false;
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return verif;
    }

    public boolean verificarEstado(int dni) {
        boolean verif = false;
        Connection con = null;
        CallableStatement cs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            cs = (CallableStatement) con.prepareCall("CALL verificarEstado(?,?)");
            cs.setInt(1, dni);
            cs.registerOutParameter(2, java.sql.Types.BOOLEAN);
            cs.execute();
            verif = cs.getBoolean(2);
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return verif;
    }

    private void crearVinculo(int dniReferente, int dniReferido) {
        if (dniReferente != dniReferido) {
            Connection con = null;
            PreparedStatement st = null;
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
                st = con.prepareStatement("update adheridos set dnipadre = ? where DNI = ?");
                st.setInt(1, dniReferente);
                st.setInt(2, dniReferido);
                st.executeUpdate();
                JOptionPane.showMessageDialog(this, "El vinculo se realizo con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);
                sumarCantidadHijosPadre(dniReferente);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Un hijo no puede ser hijo de si mismo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sumarCantidadHijosPadre(int dniReferente) {
        int cantHijos = obtenerCantidadHijos(dniReferente) + 1;
        Connection con = null;
        PreparedStatement st = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);            st = con.prepareStatement("update adheridos set CantHijos = ? where DNI = ?");
            st.setInt(1, cantHijos);
            st.setInt(2, dniReferente);
            st.executeUpdate();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    private int obtenerCantidadHijos(int dniReferente) {
        Connection con = null;
        Statement st = null;
        int retorno = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select CantHijos from adheridos where dni = " + dniReferente);
            while (rs.next()) {
                retorno = rs.getInt(1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return retorno;
    }

    private void mostrarDatos() {
        Connection con = null;
        Statement st = null;
        try {
            Object[] datos = new Object[3];
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from view_comodines");
            while (rs.next()) {
                datos[0] = rs.getInt(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getInt(3);
                Modelo.addRow(datos);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void CargarInterfaz() {
        String Filas[][] = {};
        String Columnas[] = {"DNI", "Nombre y apellido", "Cantidad de hijos"};
        Modelo = new DefaultTableModel(Filas, Columnas) {
            @Override
            public boolean isCellEditable(int fila, int columna) {
                //columna = cantidad total de columnas
                if (columna == 3) {
                    return true;
                } else {
                    return false;
                }
            }

        };
        jTable1.setModel(Modelo);
    }

    public void limpiarTabla() {
        DefaultTableModel tb = (DefaultTableModel) jTable1.getModel();
        int a = jTable1.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }
    }

    private boolean vinculoYaSeHizo(int dniReferente, int dniReferido) {
        int dniPadre = 0;
        int dniHijo = 0;
        dniPadre = traerDniPadre(dniReferido);
        dniHijo = traerDniHijo(dniReferente, dniReferido);
        if (dniPadre != 0 && dniHijo != 0) {
            return true;
        } else {
            return false;
        }
    }

    private int traerDniPadre(int dniHijo) {
        Connection con = null;
        Statement st = null;
        int retorno = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select dniPadre from adheridos where DNI = " + dniHijo);
            while (rs.next()) {
                retorno = rs.getInt(1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return retorno;
    }

    private int traerDniHijo(int dniReferente, int dnireferido) {
        Connection con = null;
        Statement st = null;
        int retorno = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);            st = con.createStatement();
            ResultSet rs = st.executeQuery("select dni from adheridos where dniPadre = " + dniReferente + " and dni = " + dnireferido);
            while (rs.next()) {
                retorno = rs.getInt(1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return retorno;
    }

    private boolean HijoPadreDePadre(int dniReferente, int dniReferido) {
        int dniPadre = traerDniPadre(dniReferente);
        if (dniPadre == dniReferido) {
            return true;
        } else {
            return false;
        }
    }

    private void VincularAdherentes(int dniReferente, int dniReferido) {
        try {
            if (dniReferente != -1 && dniReferido != -1) {
                if (puedeAgregarHijos(dniReferente)) {
                    if (dniReferente != dniReferido) {
                        if (!vinculoYaSeHizo(dniReferente, dniReferido)) {
                            if (verificarEstado(dniReferente)) {
                                if (verificarEstado(dniReferido)) {
                                    if (!HijoPadreDePadre(dniReferente, dniReferido)) {
                                        if (vinculoValido(dniReferido)) {
                                            crearVinculo(dniReferente, dniReferido);
                                        } else {
                                            int opc = JOptionPane.showConfirmDialog(this, "El referido mencionado ya tiene un referente, ¿desea eliminar el vinculo?", "Confirmacion", JOptionPane.YES_NO_OPTION);
                                            if (opc == 0) {
                                                eliminarPadre(dniReferido);
                                            }
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, "El referido indicado es referente del referente indicado", "Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "El referido esta dado de baja", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "El referente esta dado de baja", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "El vinculo ya existe", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Los DNI especificados son los mismos", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "El DNI del referente ingresado ya posee la cantidad maxima de hijos", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "El/los dni ingresados no existen");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Debe completar todos los campos");
        }
    }

    private boolean vinculoValido(int dniReferido) {
        int dniPadre = traerDniPadre(dniReferido);
        if (dniPadre == 0) {
            return true;
        } else {
            return false;
        }
    }

    private void eliminarPadre(int dniReferido) {
        Connection con = null;
        PreparedStatement st = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.prepareStatement("update adheridos set dnipadre = ? where DNI = ?");
            st.setInt(1, 0);
            st.setInt(2, dniReferido);
            st.executeUpdate();
            JOptionPane.showMessageDialog(this, "El vinculo se elimino con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void rellenarDatosParaModificacion(int dni) {
        Connection con = null;
        Statement st = null;
        String nombre = "", apellido = "", telefono = "", domicilio = "", ciudad = "", provincia = "", profesion = "", categoria = "";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select nombre, apellido, telefono, domicilio, ciudad, provincia, profesion, categoria from adheridos where dni = " + dni);
            while (rs.next()) {
                nombre = rs.getString(1);
                apellido = rs.getString(2);
                telefono = rs.getString(3);
                domicilio = rs.getString(4);
                ciudad = rs.getString(5);
                provincia = rs.getString(6);
                profesion = rs.getString(7);
                categoria = rs.getString(8);
            }
            jtf_Nombre.setText(nombre);
            jtf_Apellido.setText(apellido);
            jtf_Telefono.setText(telefono);
            jtf_Ciudad.setText(ciudad);
            jtf_Domicilio.setText(domicilio);
            jtf_Provincia.setText(provincia);
            jtf_Profesion.setText(profesion);
            jtf_Categoria.setText(categoria);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_AgregarAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void RellenarNombreVinculos(int dni, int op) {
        Connection con = null;
        Statement st = null;
        String nombre = "";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/confidence?noAccessToProcedureBodies=true", user, password);
            st = con.createStatement();
            ResultSet rs = st.executeQuery("select nombre from adheridos where dni = " + dni);
            while (rs.next()) {
                nombre = rs.getString(1);
            }
            if (op == 1) {
                jtf_edicionVinculoNombreReferido.setText(nombre);
            } else {
                jtf_edicionVinculoNombreReferente.setText(nombre);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frm_editarDatosAdherente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void activarJTFs(boolean opc) {
        jtf_Apellido.setEnabled(opc);
        jtf_Categoria.setEnabled(opc);
        jtf_Ciudad.setEnabled(opc);
        jtf_Domicilio.setEnabled(opc);
        jtf_Nombre.setEnabled(opc);
        jtf_Profesion.setEnabled(opc);
        jtf_Telefono.setEnabled(opc);
        jtf_Provincia.setEnabled(opc);
    }
}
